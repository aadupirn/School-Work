Aadu Pirn
1541 Homework One
Collaborated with Jonathan Selling for some of the work.
 1.
    a)
        lw = 20%, sw = 15%

        lw and sw have 2 memory accesses. One of them is for data. The rest only have one memory access not for data.

        (.2 + .15)/(1 + .2 + .15) = 35/135 = 26%

        26% of memory accesses are for data.

        % of write memory access is 1/2 of only the store word memory acess

        15/135 = 11.1% <- write memory accesses.
        1 - 11.1% = 88.9%

        88.9% of memory accesses are for reading from memory.

    b)
        2*10^9 clk/sec
        .5*6 +.35*5 + .1*3 +.05*2 = Avg CPI = 5.15
        2GHz/5.15 = 388.3 MIPS

    c)
        .5*5 + .35*5 + .1*3 + .05*2 = 4.65 CPI
        1.8*10^9/4.65 = 387.1 MIPS < 388.3 MIPS

        No, you would lose over 1,000,000 instructions per second by switching.

    d)
        .45*6 + .23*5 + .17*5 + .13*3 + .05*2 = 5.1 CPI

        5.15 CPI vs 5.1 CPI plus 5% more instructions

        100 * 5.15 = 515 clocks for 100 instructions
        105 * 5.1 = 535.5 clocks for 100 instructions

        No, it would take more clocks to finish the same instruction set even though your CPI is higher.

2.
    addi    $s0,    $zero,  96      <- I-type
        opcode: 8
        rs: 16
        rt: 0
        immediate: 96
        001000 10000 00000 0000000001100000

    lw      $t2,    180($s2)        <- I-type
        opcode: 35
        rs: 19
        rt: 10
        immediate: 180
        100011 10011 01010 0000000000100011
    sub     $t2,    $s3,    $t1     <- R-type
        opcode: 0
        rd: 10
        rs: 20
        rt: 9
        shamt: 0
        funct: 34
        000000 10100 01001 01010 00000 100010

    sw      $t2,    180($s2)        <- I-type
        opcode: 43
        rs: 19
        rt: 10
        immediate: 180
        101011 10011 01010 0000000000100011

    addi    $s2,    $s2,    -4      <- I-type
        opcode: 8
        rs:10
        rt:10
        immediate: -4
        001000 01010 01010 1111111111111100

    bne     $s2,    $zero,  Loop    <- I-type
        opcode: 5
        rs: 10
        rt: 0
        immediate: -4
        000101 01010 00000 1111111111111100

3.
    a) These instructions can be used to call functions. If you jal to a location you will be able to return to the location you jal'ed from with the jr instruction. The jal is the function call and jr is the return statement.
    b) On other sheet
    c) On other sheet

4. a-d specify the longest path I was able to discern through the design for each instruction.
    a) r type
        pc read: 10ps
        instruction read: 250ps
        read r: 160ps
        alu: 150ps
        write r: 160ps
        mux: 10x3

        250 + 160 + 150 + 160 + 10 + 30 = 760ps

    b) sw
        pc read: 10
        inst read: 250
        read r: 160
        alu: 150
        d-mem: 250
        2 muxes: 20
        10+250+160+10+150+250+20 = 840ps

        You don't have to worry about sign extend because it is slower than reading data from the register.

    c) lw
        pc read: 10
        inst read: 250
        read r: 160
        mux before alu: 10
        alu: 150
        d-mem: 250
        memtoreg mux:10
        regDst mux: 10
        10+250+160+10+150+250+10+10 = 850ps

    d) beq
        pc: 10
        inst: 250
        read r: 160
        alu mux: 10
        alu: 150
        mux to choose pc: 10
        10+250+160+10+150+10 = 590ps

    e)
        850ps because it has to accomodate the longest instruction (lw) which is 850ps.

    f)
        The cycle time would be the length of the longest stage plus 20ps for reading and writing to buffers. The stage that takes the longest is the IF stage. The longest path through it uses a mux (10ps), accesses the pc (10ps) and instruction memory(250ps). That adds up to 270ps plus the 20ps for buffering leads to a cycle time of 290ps.
